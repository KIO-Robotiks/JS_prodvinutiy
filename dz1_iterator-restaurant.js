// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.
//
// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:
//
// {
//     title: "Название альбома",
//         artist: "Исполнитель",
//     year: "Год выпуска"
// }
//
// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const albums = [
    {title: "firstAlbum", artist: "Cannibal Corpse", year: "1989"},
    {title: "Mega", artist: "Napalm Death", year: "1991"},
    {title: "Super", artist: "Steve Vai", year: "2001"},
]

const musicCollection = {
    albums: [...albums],
    [Symbol.iterator]: function () {
        let count =0;
        return {
            next: (() => {
                if (count >= this.albums.length) {
                    return {done: true}
                } else {
                    return {
                        value: this.albums[count++],
                        done: false
                    }
                }
            })
        }
    }
}

for (const musicCollectionElement of musicCollection) {
    console.log(musicCollectionElement);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
//
//     Необходимо создать систему управления этими заказами, которая позволит:
//
//     • Отслеживать, какой повар готовит какое блюдо.
//     • Записывать, какие блюда заказал каждый клиент.
//
//     Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.
//
//     Повара и их специализации:
//
//     Виктор - специализация: Пицца.
//     Ольга - специализация: Суши.
//     Дмитрий - специализация: Десерты.
//
//     Блюда и их повара:
//
//     Пицца "Маргарита" - повар: Виктор.
//     Пицца "Пепперони" - повар: Виктор.
//     Суши "Филадельфия" - повар: Ольга.
//     Суши "Калифорния" - повар: Ольга.
//     Тирамису - повар: Дмитрий.
//     Чизкейк - повар: Дмитрий.
//
//     Заказы:
//
//     Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
//     Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
//     Клиент Ирина заказала: Чизкейк.


// повара
const Victor = { name: 'Виктор' };
const Olga = { name: 'Ольга' };
const Dmitry = { name: 'Дмитрий' };

// клиенты
const Alexey = { name: 'Алексей' };
const Maria = { name: 'Мария' };
const Irina = { name: 'Ирина' };

// специализации поваров
const cooks = new Map();
cooks.set(Victor, 'Пицца');
cooks.set(Olga, 'Суши');
cooks.set(Dmitry, 'Десерты');

// блюда
const bluda = new Map();
bluda.set('Пицца "Маргарита"', Victor);
bluda.set('Пицца "Пепперони"', Victor);
bluda.set('Суши "Филадельфия"', Olga);
bluda.set('Суши "Калифорния"', Olga);
bluda.set('Тирамису', Dmitry);
bluda.set('Чизкейк', Dmitry);

// заказы
const orders = new Map();
orders.set(Alexey, ['Пицца "Пепперони"', 'Тирамису']);
orders.set(Maria, ['Суши "Калифорния"', 'Пицца "Маргарита"']);
orders.set(Irina, ['Чизкейк']);

// Вывод информации по текущим заказам
for (const client of orders.keys()) {
    console.log(`--------------------------`);
    console.log(`Заказы для ${client.name}:`);
    for (const order of orders.get(client)) {
        console.log(`${order} готовит ${bluda.get(order).name} потому что его специализация ${cooks.get(bluda.get(order))}`);
    }
}


























